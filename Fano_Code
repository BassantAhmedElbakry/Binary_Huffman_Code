%%%%%%%%%%% Fano Code %%%%%%%%%%% 
clc 
clear 
 
%% First, Enter number of Symbols 
Num_of_symbols = input("Please Enter no. of symbols: \n"); 
 
%% Second, Enter each symbols and its probability 
 
% Define Symbols and Probabilities variables with no. of symbols size 
Symbols = zeros(Num_of_symbols,1); 
Probabilities = zeros(Num_of_symbols,1); 
 
% Get Symbols
for i = 1 : Num_of_symbols 
   fprintf("Enter Symbole %d: \n",i) 
   Symbols(i) = input(''); 
end 
 
% Get probabilites 
for i = 1 : Num_of_symbols 
   fprintf("Enter Symbole %d probability: \n",i) 
   Probabilities(i) = input(''); 
end 
 
%% Third, Sort the probability descanding 
Sorted_Symbols = []; 
Maximum = 0; 
index = 0; 
 
for i = 1 : Num_of_symbols 
    % Get the maximum and its index to sort Symbols too 
    [Maximum,index] = max(Probabilities(:)); 
    % Concatenate the 2 arrays vertically 
    Sorted_Symbols = vertcat(Sorted_Symbols,{string(Symbols(index)),Maximum}); 
 
    % Probability can't be less than 0 
    % So we will switch the max probability with -ve number 
    Probabilities(index) = -1; 
end 
 
%% Get The Codeword 
Table{1} = Sorted_Symbols; 
Code_word = Sorted_Symbols; 
Num_of_Groups = length(Table); 
 
My_Symbols = Table{Num_of_Groups}(:,1); 
My_Probabilities = Table{Num_of_Groups}(:,2); 
 
% Divide Symbols into 2 groups 
% with least probability difference between the divided groups 
 
% Concatenate the 2 arrays horizontally 
A = horzcat(My_Symbols,My_Probabilities); 
Prob = [A{:,2}]; 
 
Num_of_Rows = size(A);
A_2 = {}; 
 
% Get min difference 
for i = 1 : Num_of_Rows(1) - 1 
    Difference = abs(sum(Prob(1:i)) - sum(Prob(i+1:Num_of_Rows(1)))); 
    % Concatenate the 2 arrays vertically 
    A_2 = vertcat(A_2,{i,Difference}); 
end 
[M,Index]  = min([A_2{:,2}]); 
Part_1 = A(1:Index,:); 
Part_2 = A(Index+1:Num_of_Rows(1),:); 
Len_1  = length(1:Index); 
Len_2  = length(Index+1:Num_of_Rows(1)); 
 
Zeros = cellstr(repmat('0',Len_1,1)); 
Ones  = cellstr(repmat('1',Len_2,1)); 
Code_word = horzcat(Code_word,vertcat(Zeros,Ones)); 
Table{1} = Part_1; 
Table{2} = Part_2; 
 
while Num_of_Groups ~= Num_of_symbols 
    Num_of_Groups = length(Table); 
    T = {}; 
    for i = 1:Num_of_Groups 
        My_Symbols = Table{i}(:,1); 
        My_Probabilities = Table{i}(:,2); 
        if length(Table{i}(:,1)) ~= 1 
            % Concatenate the 2 arrays horizontally 
            A = horzcat(My_Symbols,My_Probabilities); 
            Prob = [A{:,2}]; 
 
            Num_of_Rows = size(A); 
            A_2 = {}; 
            % Get min difference 
            for i = 1 : Num_of_Rows(1) - 1 
                Difference = abs(sum(Prob(1:i)) - sum(Prob(i+1:Num_of_Rows(1)))); 
                A_2 = vertcat(A_2,{i,Difference}); 
            end 
            [M,Index]  = min([A_2{:,2}]); 
            Part_1 = A(1:Index,:); 
            Part_2 = A(Index+1:Num_of_Rows(1),:); 
            Len_1  = length(1:Index); 
            Len_2  = length(Index+1:Num_of_Rows(1)); 
            T = horzcat(T,{Part_1},{Part_2}); 
            Array = [Sorted_Symbols{:,1}]; 
            for j = 1:Len_1 
                % Find the index of Part_1{j,1} Value 
                for c_1 = 1:length(Array)  
 
                    if Part_1{j,1} == Array(c_1) 
                        Index = c_1; 
                        break; 
                    else 
                        Index = -1; 
                    end 
                end 
                Code_word{Index,3} = horzcat(Code_word{Index,3},'0'); 
            end 
            for k = 1:Len_2 
                % Find the index of Part_2{k,1} Value 
                for c_2 = 1:length(Array) 
                    if Part_2{k,1} == Array(c_2) 
                        Index = c_2; 
                        break; 
                    else 
                        Index = -1; 
                    end 
                end 
                Code_word{Index,3} = horzcat(Code_word{Index,3},'1'); 
            end 
        else 
            T = horzcat(T,Table(i)); 
        end 
    end 
    Table = T; 
end 
disp("My Code Word:") 
Code_word 
